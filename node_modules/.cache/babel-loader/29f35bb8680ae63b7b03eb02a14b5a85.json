{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board(_ref) {\n  _s();\n\n  let {\n    nrows,\n    ncols,\n    chanceLightStartsOn\n  } = _ref;\n  const [board, setBoard] = useState(createBoard());\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  function createBoard() {\n    let initialBoard = []; // TODO: create array-of-arrays of true/false values\n\n    return initialBoard;\n  }\n\n  function hasWon() {// TODO: check the board in state to determine whether the player has won.\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      }; // TODO: Make a (deep) copy of the oldBoard\n      // TODO: in the copy, flip this cell and the cells around it\n      // TODO: return the copy\n\n    });\n  } // if the game is won, just show a winning msg & render nothing else\n  // TODO\n  // make table board\n  // TODO\n\n}\n\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","Board","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","initialBoard","hasWon","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy"],"sources":["/Users/taiohkubota/Desktop/Springboard/Career Track/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n\n  // TODO\n}\n\nexport default Board;\n"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,KAAT,OAAsD;EAAA;;EAAA,IAAvC;IAAEC,KAAF;IAASC,KAAT;IAAgBC;EAAhB,CAAuC;EACpD,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACQ,WAAW,EAAZ,CAAlC;EAEA;;EACA,SAASA,WAAT,GAAuB;IACrB,IAAIC,YAAY,GAAG,EAAnB,CADqB,CAErB;;IACA,OAAOA,YAAP;EACD;;EAED,SAASC,MAAT,GAAkB,CAChB;EACD;;EAED,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;IAC9BL,QAAQ,CAACM,QAAQ,IAAI;MACnB,MAAM,CAACC,CAAD,EAAIC,CAAJ,IAASH,KAAK,CAACI,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAAf;;MAEA,MAAMC,QAAQ,GAAG,CAACL,CAAD,EAAIC,CAAJ,EAAOK,SAAP,KAAqB;QACpC;QAEA,IAAIL,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGX,KAAd,IAAuBU,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGX,KAAzC,EAAgD;UAC9CiB,SAAS,CAACN,CAAD,CAAT,CAAaC,CAAb,IAAkB,CAACK,SAAS,CAACN,CAAD,CAAT,CAAaC,CAAb,CAAnB;QACD;MACF,CAND,CAHmB,CAWnB;MAEA;MAEA;;IACD,CAhBO,CAAR;EAiBD,CAhCmD,CAkCpD;EAEA;EAEA;EAEA;;AACD;;GAzCQb,K;;KAAAA,K;AA2CT,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}