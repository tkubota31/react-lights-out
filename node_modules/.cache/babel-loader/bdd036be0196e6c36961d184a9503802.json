{"ast":null,"code":"var _jsxFileName = \"/Users/taiohkubota/Desktop/Springboard/Career Track/react-lights-out/src/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board(_ref) {\n  _s();\n\n  let {\n    nrows,\n    ncols,\n    chanceLightStartsOn\n  } = _ref;\n  const [board, setBoard] = useState(createBoard());\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  function createBoard() {\n    let initialBoard = []; // TODO: create array-of-arrays of true/false values\n\n    for (let i = 0; i < nrows; i++) {\n      let row = [];\n\n      for (let j = 0; j < ncols; j++) {\n        row.push(Math.random() > chanceLightStartsOn);\n      }\n\n      initialBoard.push(row);\n    }\n\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every(row => row.every(light => !light));\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      }; // TODO: Make a (deep) copy of the oldBoard\n\n\n      let boardCopy = oldBoard.map(rows => [...rows]); // TODO: in the copy, flip this cell and the cells around it\n\n      flipCell(y, x, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy); // TODO: return the copy\n\n      return boardCopy;\n    });\n  } // if the game is won, just show a winning msg & render nothing else\n  // TODO\n\n\n  if (hasWon()) {\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"You Won!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 12\n    }, this);\n  } // make table board\n  // TODO\n\n\n  let tableBoard = [];\n\n  for (let i = 0; i < nrows; i++) {\n    let row = [];\n\n    for (let j = 0; j < ncols; j++) {\n      let coord = `${i}-${j}`;\n      row.push( /*#__PURE__*/_jsxDEV(Cell, {\n        isLit: board[i][j],\n        flipCellsAroundMe: () => flipCellsAround(coord)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this));\n    }\n\n    tableBoard.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: row\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"Board\",\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: tableBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","Board","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","initialBoard","i","row","j","push","Math","random","hasWon","every","light","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","rows","tableBoard"],"sources":["/Users/taiohkubota/Desktop/Springboard/Career Track/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n\n    for (let i = 0; i<nrows; i ++){\n      let row = [];\n      for (let j=0; j<ncols; j++){\n        row.push(Math.random() > chanceLightStartsOn)\n      }\n      initialBoard.push(row)\n    }\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every(row => row.every(light => (!light)))\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      let boardCopy = oldBoard.map(rows => [...rows])\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y,x,boardCopy)\n      flipCell(y-1,x,boardCopy)\n      flipCell(y+1,x,boardCopy)\n      flipCell(y,x-1,boardCopy)\n      flipCell(y,x+1,boardCopy)\n\n      // TODO: return the copy\n      return boardCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n  if (hasWon()){\n    return <h2>You Won!</h2>;\n  }\n  // make table board\n\n  // TODO\n  let tableBoard = [];\n\n  for (let i = 0; i<nrows; i ++){\n    let row = [];\n    for (let j=0; j<ncols; j++){\n      let coord = `${i}-${j}`;\n      row.push(\n        <Cell\n        isLit = {board[i][j]}\n        flipCellsAroundMe = {()=> flipCellsAround(coord)}\n        />\n      );\n    }\n    tableBoard.push(<tr>{row}</tr>)\n  }\n  return (\n    <table className=\"Board\">\n      <tbody>{tableBoard}</tbody>\n    </table>\n  );\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}